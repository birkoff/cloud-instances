service: ec2manager-api
app: cloud-machines
tenant: company

provider:
  name: aws
  runtime: python3.7
  timeout: 30
#  stage: dev
  region: eu-central-1
  role: lambdaAssumeRole

  profile: ${file(config.${self:provider.stage}.json):profile}

  environment:
    sns_message_broadcast: ${file(config.${self:provider.stage}.json):sns_message_broadcast}
    ENVIRONMENT: ${opt:stage}

  resourcePolicy:
    - Effect: Allow
      Principal: "*"
      Action: execute-api:Invoke
      Resource:
        - execute-api:/*/*
      Condition:
        IpAddress:
          aws:SourceIp:
            - 0.0.0.0/0

package:
  include:
    - ../../handler.py
    - ../../settings.py
    - ../../modules/**
    - ../../config/*
  exclude:
    - iam/**
    - config.dev.json
    - config.prod.json

functions:
  list_accounts:
    handler: handler.list_accounts
    events:
    - http:
        path: /accounts
        method: get
        cors: true
  list_instances:
    handler: handler.list_instances
    events:
      - http:
          path: /instances
          method: get
          cors: true
  create:
    handler: handler.create
    events:
      - http:
          path: /instance
          method: post
          cors: true
  create_platform:
    handler: handler.create_platform
    events:
      - http:
          path: /platform
          method: post
          cors: true
  update:
    handler: handler.update
    events:
      - http:
          path: /instance
          method: put
          cors: true
  start:
    handler: handler.start
    events:
    - http:
        path: /instance/start
        method: post
        cors: true
  stop:
    handler: handler.stop
    events:
    - http:
        path: /instance/stop
        method: post
        cors: true
  terminate:
    handler: handler.terminate
    events:
    - http:
        path: /instance/terminate
        method: post
        cors: true
  info:
    handler: handler.info
    events:
      - http:
          path: /info
          method: get
          cors: true
  list_amis:
    handler: handler.list_images
    events:
      - http:
          path: /amis
          method: get
          cors: true
  create_image:
    handler: handler.create_image
    events:
      - http:
          path: /image
          method: post
          cors: true
  list_securitygroups:
    handler: handler.list_securitygroups
    events:
      - http:
          path: /securitygroups
          method: get
          cors: true
  stop_tagged_instances:
    handler: handler.stop_tagged_instances
    events:
      - schedule:
          rate: cron(1 * * * ? *)
  start_tagged_instances:
    handler: handler.start_tagged_instances
    events:
    - schedule:
        rate: cron(1 * * * ? *)
  terminate_tagged_instances:
    handler: handler.terminate_tagged_instances
    events:
      - schedule:
          rate: cron(0 21 * * ? *)

resources:
  Resources:
    lambdaAssumeRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /admin/
        RoleName: Ec2ManagerLambdaAssumeRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: AssumeRoleLambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sts:AssumeRole
                  Resource:
                    - "arn:aws:iam::*:role/ec2manager/*"
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      - - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
                - Effect: Allow
                  Action:
                    - iam:PassRole
                  Resource:
                    - "*"
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource:
                    - ${file(config.${self:provider.stage}.json):sns_message_broadcast}
